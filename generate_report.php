<?php
session_start();
require_once 'TCPDF-main/tcpdf.php';
require_once 'db_connection.php';

// Enable error reporting (for development)
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);
ini_set('error_log', 'error_log.txt');

// Check if POST data is received
if (!isset($_POST['studentId'], $_POST['startDate'], $_POST['endDate'])) {
    error_log("Error: Missing POST data for studentId, startDate, or endDate.");
    die("Invalid request. Please provide a student ID and a date range.");
}

$student_id = $_POST['studentId'];
$startDate = $_POST['startDate'];
$endDate = $_POST['endDate'];
$generatedBy = $_SESSION['name'] ?? 'System'; // Get logged-in user's name

// Validate date format (YYYY-MM-DD)
if (!preg_match("/^\d{4}-\d{2}-\d{2}$/", $startDate) || !preg_match("/^\d{4}-\d{2}-\d{2}$/", $endDate)) {
    error_log("Error: Invalid date format - StartDate: $startDate, EndDate: $endDate");
    die("Invalid date format. Please select valid dates.");
}

// Fetch student details
$sql_student = "SELECT Student_ID, Name, School, department FROM students WHERE Student_ID = ?";
$stmt_student = $conn->prepare($sql_student);

if (!$stmt_student) {
    error_log("Error preparing student SQL statement: " . $conn->error);
    die("Error fetching student details.");
}

$stmt_student->bind_param("s", $student_id);
$stmt_student->execute();
$result_student = $stmt_student->get_result();

if ($result_student->num_rows === 0) {
    error_log("Error: No student found with ID: $student_id");
    die("No student found with the provided ID.");
}

$student_info = $result_student->fetch_assoc();

// Fetch appointments with lecturer name
$sql = "SELECT a.appointment_id, l.name AS lecturer_name, DATE_FORMAT(a.appointment_date, '%Y-%m-%d') AS appointment_date, a.Description, a.time_of_appointment  FROM appoint a  JOIN lecturer l ON a.lecturer_id = l.Lecturer_ID  WHERE a.Student_ID = ? AND a.appointment_date BETWEEN ? AND ?";
$stmt = $conn->prepare($sql);

if (!$stmt) {
    error_log("Error preparing appointments SQL statement: " . $conn->error);
    die("Error fetching appointments.");
}

$stmt->bind_param("sss", $student_id, $startDate, $endDate);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows === 0) {
    error_log("No appointments found for Student ID: $student_id between $startDate and $endDate");
    die("No appointments found for the selected date range.");
}

// Custom TCPDF class with header and footer
class CustomPDF extends TCPDF {
    protected $generatedBy;
    protected $showFirstPageHeader = true;

    public function setGeneratedBy($name) {
        $this->generatedBy = $name;
    }

    public function setShowFirstPageHeader($show = true) {
        $this->showFirstPageHeader = $show;
    }

    public function Header() {
        if ($this->PageNo() == 1 && $this->showFirstPageHeader) {
            // Logo
            $this->Image('Ku_logo.jpeg', 15, 10, 25, 25, 'JPEG');
            // University Name
            $this->SetFont('Helvetica', 'B', 16);
            $this->Cell(0, 10, 'Kenyatta University', 0, 1, 'C');
            // System Name
            $this->SetFont('Helvetica', 'B', 14);
            $this->Cell(0, 10, 'Student Lecturer Appointment System', 0, 1, 'C');
            $this->Ln(5);
            // "Generated By" information
            $this->SetFont('Helvetica', 'I', 10);
            $this->Cell(0, 10, 'Generated By: ' . $this->generatedBy, 0, 1, 'R');
            $this->Ln(10); // Add some space after the header
        }
    }

    public function Footer() {
        $this->SetY(-25);
        $this->SetFont('Helvetica', 'I', 9);
        $this->Cell(0, 10, '________________________________________________', 0, 1, 'C');
        $this->SetFont('Helvetica', 'B', 10);
        $this->Cell(0, 10, 'Kenyatta University Student Lecturer Appointment System', 0, 1, 'C');
        $this->Ln(3);
        $this->SetFont('Helvetica', 'I', 9);
        $this->Cell(0, 10, 'Page ' . $this->getAliasNumPage() . ' of ' . $this->getAliasNbPages(), 0, 1, 'C');
    }
}

// Create a new PDF document
try {
    $pdf = new CustomPDF();
    $pdf->setGeneratedBy($generatedBy);
    $pdf->SetMargins(15, 15, 15);
    $pdf->SetAutoPageBreak(TRUE, 30);
    $pdf->AddPage();
    $pdf->SetFont('Helvetica', '', 12);

    // Report Title
    $pdf->SetFont('Helvetica', 'B', 16);
    $pdf->Cell(0, 10, "Student Appointment Report", 0, 1, 'C');
    $pdf->Ln(5);

    // Date Range
    $pdf->SetFont('Helvetica', '', 12);
    $pdf->Cell(0, 10, "From: $startDate To: $endDate", 0, 1, 'C');
    $pdf->Ln(10);

   // Student Details Table
   $pdf->SetFont('Helvetica', 'B', 12);
   $pdf->SetFillColor(230, 230, 230);
   $pdf->SetTextColor(0);
   $pdf->SetDrawColor(128, 128, 128);
   $pdf->SetLineWidth(0.3);

   $pdf->Cell(40, 10, 'Student Name', 1, 0, 'L', true);
   $pdf->Cell(50, 10, $student_info['Name'], 1, 1, 'L');

   $pdf->Cell(40, 10, 'Student ID', 1, 0, 'L', true);
   $pdf->Cell(50, 10, $student_info['Student_ID'], 1, 1, 'L');

   $pdf->Cell(40, 10, 'School', 1, 0, 'L', true);
   $pdf->Cell(50, 10, $student_info['School'], 1, 1, 'L');

   $pdf->Cell(40, 10, 'Department', 1, 0, 'L', true);
   // MultiCell for Department to handle wrapping
   $pdf->SetFont('Helvetica', '', 12);
   $pdf->MultiCell(0, 10, $student_info['department'], 1, 'L', false, 1, '', '', true, 0, false, true, 10, 'T');
   $pdf->Ln(2);

    // Appointments Table Headers
    $pdf->SetFont('Helvetica', 'B', 12);
    $pdf->SetFillColor(230, 230, 230);
    $pdf->SetTextColor(0);
    $pdf->SetDrawColor(128, 128, 128);
    $pdf->SetLineWidth(0.3);
    $header = ['Appt. ID', 'Lecturer', 'Date', 'Time', 'Description'];
    $columnWidths = [40, 30, 30, 30, 50];  // Adjusted column widths
    for ($i = 0; $i < count($header); $i++) {
        $pdf->Cell($columnWidths[$i], 10, $header[$i], 1, 0, 'C', true);
    }
    $pdf->Ln();

    // Appointments Table Data
    $pdf->SetFont('Helvetica', '', 10);
    $pdf->SetFillColor(245, 245, 245);
    $pdf->SetTextColor(0);
    $fill = false;
    while ($row = $result->fetch_assoc()) {
        $pdf->Cell($columnWidths[0], 8, $row['appointment_id'], 'LR', 0, 'C', $fill);
        $pdf->Cell($columnWidths[1], 8, $row['lecturer_name'], 'LR', 0, 'L', $fill);
        $pdf->Cell($columnWidths[2], 8, $row['appointment_date'], 'LR', 0, 'C', $fill);
        $pdf->Cell($columnWidths[3], 8, $row['time_of_appointment'], 'LR', 0, 'C', $fill);
        // MultiCell for Description to handle longer text with vertical and horizontal centering
        $pdf->MultiCell($columnWidths[4], 8, trim($row['Description']), 'LR', 'C', $fill, 1, '', '', true, 0, false, true, 8, 'M');
        $fill = !$fill;
    }
    // Closing the table border
    for ($i = 0; $i < count($header); $i++) {
        $pdf->Cell($columnWidths[$i], 0, '', 'T');
    }
    $pdf->Ln();

    // Set headers for PDF download
    header('Content-Type: application/pdf');
    header('Content-Disposition: inline; filename="student_report.pdf"');

    // Output the PDF
    $pdf->Output('student_report.pdf', 'I');

} catch (Exception $e) {
    error_log("Error generating PDF: " . $e->getMessage());
    die("Failed to generate the PDF. Please check the error log.");
}
?>